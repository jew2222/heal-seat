
generator client {

  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
 // url      = env("DATABASE_URL")
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection

}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int
  @@id(name: "id", [userId, exerciseId])
}


model User {
  id         Int          @id @default(autoincrement())
  username   String       @unique
  email      String?      @unique
  password   String
  
  phone      String?      @unique
  avatar     String?
  userRole    String?
  tokens     SMSToken[]
  likes      Like[]
  plant  String? @default("type1")
  plant_status  Int? @default(3)// 1: 죽음, 2: 시듬, 3: 시름시름, 4: 보통, 5: 좋음
  last_water_at DateTime?    @default(now())
  bgi   String?
  bgm   String?
  timer Timer[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

model Exercise {
  id          Int    @id @default(autoincrement())
  title       String
  url          String @unique
  video_id    String
  channel_id  String
  channel_name String
  thumb       String? 
  description String? 
  category    String //"POSTURE" | "EYE"|"LOWER"|"UPPER"
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  like Like[]
}

model Timer {
    id          Int    @id @default(autoincrement())
    created_at DateTime @default(now())
   // created_date DateTime @default(dbgenerated("date(now())"))
    date     DateTime 
    totalTime BigInt  @default(0)
    userId      Int
    user        User     @relation(fields: [userId], references: [id])  

     @@unique([userId, date]) // 유저별 날짜가 유니크하도록 제약 조건 추가
     // 통계데이터는 서버부하 축소를 위해 릴레이션 안건다 
}
